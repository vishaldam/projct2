<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Getting Upgraded]]></title>
  <link href="http://vikram7.github.io/atom.xml" rel="self"/>
  <link href="http://vikram7.github.io/"/>
  <updated>2014-08-17T17:10:33+00:00</updated>
  <id>http://vikram7.github.io/</id>
  <author>
    <name><![CDATA[Vikram]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Launch Academy Week 1: Systems Check]]></title>
    <link href="http://vikram7.github.io/blog/2014/08/17/launch-academy-week-1-systems-check/"/>
    <updated>2014-08-17T16:54:51+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/08/17/launch-academy-week-1-systems-check</id>
    <content type="html"><![CDATA[<p>This first week at Launch has been great. Between my fellow students and instructors, I&rsquo;ve met some very interesting people. As part of the weekly &ldquo;Systems Checks,&rdquo; I&rsquo;ve been tasked with the following:</p>

<blockquote><p>Write a blog article about something that changed your way of thinking this week. How is software development (or the Launch Academy experience) different from your other experiences?</p></blockquote>

<p>Firstly, Launch&rsquo;s focus on collaborative efforts towards knowledge and know-how (over book learning, which has its appropriate place in different arenas) can be very conducive to effective learning, especially when it comes to something like learning how to code in Ruby. The result of having others around you who you can ask questions of and be able to discuss coding problems with garners an outcome that is far more productive for me than simply trying to learn Ruby on my own.</p>

<p>The other leg to this table of learning is having an environment that allows me to focus just on one thing all day. When I trade options all day, my attention is divided between tens if not a hundred ideas. I can&rsquo;t guarantee that any one idea will work, so the more you have, the better your chances of good results. This method has its merits, but it doesn&rsquo;t allow for focus because of how many different trading ideas vied for my brain&rsquo;s attention. Being at Launch allows me to focus on one thing: How to code and how to learn how to code. I&rsquo;d like to bring some of what I learn here into trading options, but first, my focus is on the coding part.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Altered Carbon by Richard K. Morgan]]></title>
    <link href="http://vikram7.github.io/blog/2014/07/30/altered-carbon-by-richard-k-morgan/"/>
    <updated>2014-07-30T12:38:54+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/07/30/altered-carbon-by-richard-k-morgan</id>
    <content type="html"><![CDATA[<p>Richard K. Morgan&rsquo;s <a href="http://www.amazon.com/Altered-Carbon-Richard-Morgan-ebook/dp/B000FBFMZ2/">Altered Carbon</a> is a phenomenal romp through 25th century Earth that explores a future of rampant wealth inequality, religious oppression, and various concepts in philosophy of mind through future noir. The world Morgan constructed reminds me of a darker, more sinister version of the Bladerunner universe, however with colonized planets in far away star systems, each with their own social and cultural nuances that we get occasional glimpses of throughout the novel. This particular detective story, however, occurs on Earth where a person can upload and download his or her consciousness into a new &ldquo;sleeve,&rdquo; or body. The protagonist, Takeshi Kovacs, is an ex-military special forces officer turned criminal turned mercenary. His cortical stack, which contains his consciousness, is stored for a period of decades after he&rsquo;s arrested following some unnamed crime. A rich &ldquo;Meth&rdquo; (a pejorative term for the outrageously rich and long-lived &mdash; those who can update their consciousnesses regularly while keeping multiple copies of their bodies and thereby effectively living forever) gets Kovacs removed from storage so he can investigate the Meth&rsquo;s suicide. Kovacs then is ensnared in a world of immortal spies, robots, good and bad cops, and strange cultural mores. I&rsquo;m looking forward to the other two books in this series.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Return From Some Travels]]></title>
    <link href="http://vikram7.github.io/blog/2014/07/28/a-return-from-some-travels/"/>
    <updated>2014-07-28T13:38:42+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/07/28/a-return-from-some-travels</id>
    <content type="html"><![CDATA[<p>I spent the last few weeks in Berlin and Paris. João, a good friend of mine from high school, lives in Berlin now and is a photographer and <a href="https://www.facebook.com/DerMagnetmann">Der Magnetmann</a>. Seeing Berlin through his eyes is always a joy. He&rsquo;s lived there for the last seven years and done a lot of different kinds of work (stock broker, real estate agent even) while always perfecting his photography craft. He has been selling his phenomenal photography at a large flea market called <a href="http://www.mauerpark.info/">Mauerpark</a> every Sunday. A few years back, he started putting his photos on magnets and it started taking off. He now has a space, some printers, a few employees and thousands of ideas and designs to sell his magnets wholesale. I&rsquo;ve visited him a few times since he&rsquo;s lived out there and seeing him take his photography from hobby to profession to livelihood has been inspiring.</p>

<p>This trip was great too because my girlfriend and her close friend (who is German but hadn&rsquo;t visited Berlin yet) joined a week after I was out there. We got to see a few different neighborhoods and do some really fun, interesting and fascinating walking tours of Berlin. I hadn&rsquo;t done a guided tour and I&rsquo;m completely convinced now that it&rsquo;s a perfect way to see the very basics of a new city I&rsquo;m visiting. The first tour we did was the <a href="http://berliner-unterwelten.de/home.1.1.html">Berliner Unterwelten</a> tour where we learned about the Wall and the different ways people tried to escape it through tunnels (which were dug in both directions &mdash; East to West and West to East). Hearing about the personal stories of people escaping and attempting to escape the East was incredible. Some of these tunnels were discovered as recently as ten years ago. The second tour was through <a href="http://www.newberlintours.com/daily-tours/free-tour.html">Sandeman</a>, which was a more general tour of the major sites in Mitte. Our guide Leo was fantastic and highly knowledgeable about the history of the town. Berlin, of course, was basically destroyed during World War II and it took years for it to be rebuilt (cranes after cranes are constantly seen in the city now). The tour ended with an interesting thought about Berlin always changing &mdash; that Paris will always be Paris, New York will always be New York, but Berlin will never be Berlin.</p>

<p>I also got to see <a href="https://www.youtube.com/watch?v=Sdkw_u1E2zw">Ai Weiwei</a>&rsquo;s art exhibit in Berlin. This was absolutely incredible. His art is thought-provoking and inspiring. One of his exhibits were 3,000-5,000 year old vases that he painted in metal (auto metal in some cases). Another similar exhibit exemplified the idea that people get offended when vases or old pieces of artwork are destroyed or re-imagined while there are all kinds of atrocities going on in the world today. I think this is an important point. Why should we be offended by the destruction of a 3,000 year old vase when children are being killed today in poor labor conditions or architectural endeavors? I think this kind of criticism is necessary in our world and to see it so magnificently done was encouraging.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perdido Street Station by China Mieville]]></title>
    <link href="http://vikram7.github.io/blog/2014/07/10/perdido-street-station-by-china-mieville/"/>
    <updated>2014-07-10T00:16:28+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/07/10/perdido-street-station-by-china-mieville</id>
    <content type="html"><![CDATA[<p>After much prodding by those who find his writing fresh and dark, sincere and wild, I finally got around to reading China Miéville. His <em>Perdido Street Station</em> read as if it were a script to a Frank Miller project like Sin City depicting the &ldquo;weird&rdquo; horror writer HP Lovecraft penning a story in the Mos Eisley Cantina about the world of Shadowrun where technology has been replaced with steampunk, magic with thaumaturgy and where insect-people fall in love with humans, while other humanoid races remake themselves into monstrous beings with tentacles and all kinds of other appendages from Asian horror-films. Though mostly dark &mdash; throughout much of the story, its characters interact with disgusting, weird and strange creatures and deal with the dredges of what humanity offers &mdash; it is absolutely new and refreshing as far as science fiction and fantasy go. Its dark realism leaves miles of room to question the motives of its characters and reflect on the ethical dilemmas that the events of the novel propose particularly towards the end. As much as I would have liked to, I couldn&rsquo;t give the work five stars on the account of its somewhat jerky plot that took a quarter of the book to get into. I also would have liked to read more about thaumaturgy, or the magic that exists in the world of Bas-Lag. Regardless, I&rsquo;m looking forward to reading more Miéville.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading: Practical Object-Oriented Design in Ruby by Sandi Metz]]></title>
    <link href="http://vikram7.github.io/blog/2014/07/03/reading-practical-object-oriented-design-in-ruby-by-sandi-metz/"/>
    <updated>2014-07-03T16:22:12+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/07/03/reading-practical-object-oriented-design-in-ruby-by-sandi-metz</id>
    <content type="html"><![CDATA[<p>These are just my notes on Chapters 1-3 in Sandi Metz&rsquo;s <em>Practical Object-Oriented Design in Ruby</em>. The words are mix of mine and the author’s. They are not intended for reprint elsewhere.</p>

<p><strong>Chapter 1: Object-Oriented Design</strong></p>

<blockquote><p>Changing requirements are the programming equivalent of friction and gravity. They introduce forces that apply sudden and unexpected pressures that work against the bestlaid plans. It is the need for change that makes design matter. &mdash; Sandi Metz</p></blockquote>

<p>Object-oriented design is related to parts, when combined, produce a certain behavior of the whole. <em>Objects</em> are the parts and <em>messages</em> have embodied in them their interactions. <em>Dependencies</em> occur when we want to get the correct message to the target object. The sender needs to have knowledge about the receiver. Object-oriented design is about <em>managing dependencies</em> and how objects can survive change. Part of good design is that you not only have to write code for the feature today, but one that can be changed in the future.</p>

<p>There are also <em>tools</em> for design (like SOLID, and others). Some code preparation and combination works well and some doesn&rsquo;t. Good <em>patterns</em> also exist but one should be aware of when certain patterns should be applied to certain problems. Poor design can result in software failures especially if a programmer doesn&rsquo;t understand object oriented programming. Agile development allows you to do build incrementally.</p>

<p><strong>Chapter 2: Designing Classes with a Single Responsibility</strong></p>

<p>Classes. What belongs in a class? Methods are defined in classes. Classes define the &ldquo;virtual world&rdquo; that everything else flows from. Design is allowing for changeability rather than that of achieving perfection. Could should be <strong>Transparent</strong> (consequences of changing code should be obvious), <strong>Reasonable</strong> (cost of a change should be proportional to benefits), <strong>Usable</strong> (existing code should be usable in new and unexpected ways), and <strong>Exemplary</strong> (the code should inspire others who want to change it to maintain these qualities). The first step of maintaining <strong>TRUE</strong> is that each class have a single, well-defined responsibility. A class should do one small thing. A class should have a single responsibility.</p>

<p>Why does single responsibility matter? Applications that you can change with ease are made of classes that are easy to use. Reusable classes are like building blocks with few entanglements. Classes with multiple responibilities will have multiple entanglements and could cause problems.</p>

<p>How do you know if a class has a single responsibility? One way to is to interrogate the class and ask questions to it. A class is cohesive if everything in the class is dedicated towards a single responsibility. In fact, the <strong>Single Responsibility Principle</strong> is the idea that everything in a class is highly related towards the class&rsquo;s purpose.</p>

<p>Writing Code that Embraces Change. Depend on behavior, not on data. Hide instance variables, hide data structures, extract responsibilities from methods, isolate extra responsibilities in classes.</p>

<p>Methods with single responsibilities allow for the following: they expose previously hidden qualities, they avoid the need for comments, they encourage reuse and are easy to move to another class</p>

<p><strong>Chapter 3: Managing Dependencies</strong></p>

<blockquote><p>Your design challenge is to manage dependencies so that each class has the fewest possible; a class should know just enough to do its job and not one thing more. &mdash; Sandi Metz</p></blockquote>

<ul>
<li>Dependency Injection: Creates loosely coupled objects that can be reused in multiple, new ways.</li>
<li>Isolate Dependencies: Allows objects to quickly adapt to unexpected changes.</li>
<li>Remove Argument-Order Dependencies: Decreases likelihood of facing changes.</li>
<li>Managing Dependency Direction: &ldquo;The road to maintenance nirvana is paved with classes that depend on things that change less often than they do.&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Meaning Through Coding]]></title>
    <link href="http://vikram7.github.io/blog/2014/07/02/finding-meaning-through-coding/"/>
    <updated>2014-07-02T18:58:24+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/07/02/finding-meaning-through-coding</id>
    <content type="html"><![CDATA[<p>Just started reading Sandi Metz&rsquo;s <em><a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">Practical Object-Oriented Design in Ruby</a></em> as part of the prework for Launch. The introduction had a great bit about how programmers interact with their worlds (or should, rather) that I think is quite relevant to how everyone should feel about their world and how they apply meaning to their lives:</p>

<p><img src="https://github.com/vikram7/vikram7.github.io/blob/master/images/sandi_intro.jpg?raw=true" alt="" /></p>

<p>That we should have work with meaning, that it&rsquo;s our best work and that it&rsquo;s enjoyable are highly laudable goals to strive for in everything that we do. Or at least in what I do. In many ways, I feel intellectually stunted having been in finance for so long. I feel no new neurons firing off nor do I or any sense of wonder in what I do. In fact, I feel as though I&rsquo;ve become more stupid. Perhaps it was more enjoyable at one point, but that point has long passed and I don&rsquo;t see it coming back again. Moreover, my work has very little &ldquo;meaning&rdquo; and is only occasionally enjoyable. Attempting to make money for myself and for a future family, perhaps can be goals, but they just seem like ends and not something that I can derive a sense of accomplishment or meaning from. I look at my trading screens and think to myself that this can&rsquo;t possibly be what my life has become. But it has. Additionally, my disillusionment in finance has heightened. At some level, most forms of finance involve helping people who already have obscene amounts of money rake in more obscene amounts of money. Helping rich people get richer isn&rsquo;t exactly a commendable path in life.</p>

<p>I think there are a great number of <em>real</em> problems out there in the world that need to be tackled in education, or healthcare or the environment. I have no idea what specifically I want to do in these fields, but I do know that they are important and affect all of us, regardless of our stature in life. Deriving meaning from tackling these problems seems much more worthy of an endeavor than sitting around all day trying to find a new trading idea. Maybe someone out there can do both, but I haven&rsquo;t been able to figure out how.</p>

<p>So that brings me to programming and why I&rsquo;ve decided to join Launch and see where it takes me. My parents had always mentioned that <em>education</em> was the most important asset that a person can have and it&rsquo;s something that no one can take away. I don&rsquo;t think I appreciated that viewpoint in my youth as much as I do now. Even my grandfather would emphasize how important the brain is and how little we know about it. Anyways, what I am trying to say here is that one reason that I&rsquo;m looking forward to programming is that it will open up a new part of my brain, a part that I don&rsquo;t feel that have used in a long time, and that I look forward to refining. That&rsquo;s one of my biggest goals out of the program and after that, I want to start thinking about how else I can participate in an endeavor using coding to bring meaning into my life. There are a lot of interesting companies doing fascinating work in education and healthcare, and I think working on some of these problems would be provide me with a level of meaning that I don&rsquo;t really have in finance. There&rsquo;s also so much going on in robotics that could be really incredible to be part of. As of now, I&rsquo;m generally interested in the following topics and I think working on problems related to them would provide for the intellectual and emotional meaning that I&rsquo;m looking for:</p>

<ul>
<li>education, including brain enhancement</li>
<li>healthcare</li>
<li>robotics</li>
<li>environmental concerns</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning Database Design by Clare Churchers (Ch. 12, Conclusion)]]></title>
    <link href="http://vikram7.github.io/blog/2014/07/01/beginning-database-design-by-clare-churchers-ch-12-conclusion/"/>
    <updated>2014-07-01T14:05:13+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/07/01/beginning-database-design-by-clare-churchers-ch-12-conclusion</id>
    <content type="html"><![CDATA[<p>These are just my notes on Chapters 12 and the Conclusion of Beginning Database Design. The words are mix of mine and the author’s. They are not intended for reprint elsewhere.</p>

<p>Chapter 12: Other Implementations</p>

<p><strong>Object-oriented databases</strong>:</p>

<p>Advantages exist for OO databases over relational. Complex queries might be more difficult to setup, however. For an OO database data model, we have to consider the following:</p>

<ul>
<li>Define a class for each class</li>
<li>Consider making classes for complex data types like addresses or names</li>
<li>Consider adding methods to classes (for formatting or calculations, for example)</li>
<li>Give thought to how a user will identify objects (like a primary key)</li>
<li>For the Many part of a relationship, include a collection with references to several objects</li>
<li>For the 1 part of a relationship, include a reference to a particular object</li>
</ul>


<p><strong>Spreadsheets</strong>:</p>

<p>Considered to be simpler and easier than databases.
1-Many relationship:</p>

<ul>
<li>Create a separate sheet for each class</li>
<li>Create a sheet where all information will be brought together</li>
<li>Use exact match lookups to display information from other sheets</li>
<li>Use data validation features for integrity between sheets</li>
</ul>


<p>Many-Many relationship:</p>

<ul>
<li>Repeated columns (good for validation and reporting, but not querying)</li>
<li>Categories as columns (good for validation, reporting, and querying)</li>
<li>Normalized ranges (good for validation and querying but poor for reporting and ease of use)</li>
</ul>


<p>Final Chapter: Conclusion</p>

<p>There are several key things to keep in mind when working through database creation:</p>

<ol>
<li>Understanding the Objective and Requirements</li>
</ol>


<p>You need to ask searching questions when it comes to what the requirements are. Most people use databases for storage but aren&rsquo;t aware of all the reasons that could arise from it. It&rsquo;s worth really delving into the requirements and possible use cases.</p>

<ol>
<li>Polishing Your Data Model</li>
</ol>


<p>Check optionality and cardinality of relationships; Check 1-many relationships with respect to whether you need to keep historical data; Check many-many relationships to see if there&rsquo;s data that depends on both classes; Some situations can be modeled with self-relationships; Check for different routes between classes. If you can get between two calsses with different routes, the routes should represent different information; Consider introducing a new class where you need to know about the combinations of objects from three or more classes simultaneously; Consider inheritance when you come across a class and think &ldquo;this class is like that one except for &hellip;&rdquo;</p>

<ol>
<li>Representing Your Model in a Relational Database</li>
</ol>


<p>the RD is based on tables; every table must have a primary key; you can look at relationships between classes once your classes are represented by tables with primary keys (1-Many represented by using foreign keys; Many-Many reconstructed as two 1-Many); apply principles of normalization to check that tables are desigend in such a way that data can be entered and maintained with the greatest possible accuracy</p>

<ol>
<li>Using Your Database</li>
</ol>


<p>Figure out how people are going to use the database. How does information get pulled out? Well-designed forms and the like will help a lot here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning Database Design by Clare Churchers (Ch. 10, 11, 12)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/30/beginning-database-design-by-clare-churchers-ch-10-11-12/"/>
    <updated>2014-06-30T15:40:54+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/30/beginning-database-design-by-clare-churchers-ch-10-11-12</id>
    <content type="html"><![CDATA[<p>These are just my notes on Chapters 10 and 11 of Beginning Database Design. The words are mix of mine and the author’s. They are not intended for reprint elsewhere.</p>

<p>Chapter 10: Queries</p>

<ul>
<li><strong>There are a number of different relational database operations</strong>: Retrieve a subset of rows (or columns) from a table or view; use <em>join</em> to combine two tables or view; perform operations like intersect, union, difference on tables or views with the same columns</li>
<li>Indexes can speed up queries (though can slow updating data)</li>
<li>Views let you see the specs of a query to be able to reuse it</li>
</ul>


<p>Chapter 11: User Interface</p>

<ul>
<li>Well designed forms = convenience; forms and reports are usually based on views</li>
<li>If you control the permissions granted to the views, you can restrict different users to specific forms and reports</li>
<li>Subforms are a convenient way to add data involved in a 1-Many relationship</li>
<li>On forms, list boxes are a good way for users to select an allowed view; more constraints can be added with these</li>
<li>Using a different grouping will allow different reports to be constructed on a single view</li>
<li>Reports can include summary data like totals, subtotals, counts, etc.</li>
<li>Reports can be designed to further refine the subset of data each time one is run</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning Database Design by Clare Churchers (Ch. 8, 9)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/26/beginning-database-design-by-clare-churchers-ch-8-9/"/>
    <updated>2014-06-26T11:21:51+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/26/beginning-database-design-by-clare-churchers-ch-8-9</id>
    <content type="html"><![CDATA[<p>These are just my notes on Chapters 8 and 9 of Beginning Database Design. The words are mix of mine and the author’s. They are not intended for reprint elsewhere.</p>

<h2>Chapter 8: Normalization</h2>

<p>A reminder:</p>

<ul>
<li>Each class is represented by a table</li>
<li>Each object becomes a row in a table</li>
<li>For each table, we determine a primary key, which is a field that uniquely identifies each row</li>
<li>We use the primary keyfield to represent relationships between tables by way of foreign keys</li>
</ul>


<p><strong>Normalization</strong> is a way of checking fields to make sure they&rsquo;re in the right table or see if tables need to be restructured or added</p>

<p><strong>Summary</strong></p>

<p>Poorly structured database tables can have some of the following problems:</p>

<ul>
<li>Modification problems: Repeated information might become inconsistent</li>
<li>Insertion problems: The inability to enter a record because we don&rsquo;t have information for each of the primary key fields</li>
<li>Deletion problems: Losing additional information after deleting a record to remove some information</li>
</ul>


<p>What can help with avoiding the above problems?: Functional dependencies, primary keys, and normalization</p>

<ul>
<li>A functional dependency exists between two sets of fields in a table: If field A functionally determines field B, this means that if I know the value for A, I can uniquely tell you a value for B</li>
<li>A primary key is a (minimal) set of field(s) that functionally determines all the other fields in the table</li>
<li>The first three normal forms can be summed up as: A table is based on: (1) The key; (2) The whole key; and (3) nothing but the key</li>
<li>A table in Boyce-Codd normal form is one where every determinant could be a primary key</li>
<li>Where you have three or more interrelated classes, ask questions about what information you need to know that involves all three classes and what information involves two classes independent of the third</li>
</ul>


<p>In a relational database,</p>

<ul>
<li>Create original use cases and a data model</li>
<li>Ask questions about the data model to improve understanding of the problem</li>
<li>Represent the data model with tables, primary keys and foreign keys</li>
<li>Check each table is suitably normalized</li>
</ul>


<h2>Chapter 9: More on Keys and Constaints</h2>

<p>Choosing an appropriate primary key</p>

<ul>
<li>Often, we introduce an ID number to make sure we have a stable, unique field</li>
<li>Mistakes in data entry means its possible to have a person in your database with two different ID numbers, which is not good</li>
<li>If a primary field is made up of several concatanated fields, its worth generating an ID number to reduce the size of foreign keys referencing the table</li>
<li>Unique constraints can be used to retain the uniqueness of combinations of fields that have been replaced as a primary key with a generated ID</li>
<li>Sometimes it might be useful to use a constraint on a value of field rather than have a relationship to another table</li>
<li>There are three options when it comes to row deletion that&rsquo;s being referenced by a foreign key: (1) Disaloow the deletion; (2) Make the field referencing the deleted row rowNULL (nullify delete); and (3) Remove all rows that reference the deleted row (cascade delete)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning Database Design by Clare Churchers (Ch. 6, 7)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/25/beginning-database-design-by-clare-churchers-ch-6-7/"/>
    <updated>2014-06-25T15:27:46+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/25/beginning-database-design-by-clare-churchers-ch-6-7</id>
    <content type="html"><![CDATA[<p>These are just my notes on Chapters 6 and 7 of Beginning Database Design. The words are mix of mine and the author’s. They are not intended for reprint elsewhere.</p>

<p>Chapter 6: Generalization and Specialization</p>

<p>A couple questions to keep in mind:</p>

<ul>
<li>Do two classes have enough in common to reconsider how they are defined?</li>
<li>Are some of the objects in a given class different enough from other objects to warrant reconsidering how they are defined?</li>
</ul>


<p>Data model of inheritance</p>

<pre><code>    [ Super Class]
    /             \
[Sub Class A]   [Sub Class B]
</code></pre>

<p>Super Class becomes valuable when we ask questions like &ldquo;Can X be assigned to A or B?&rdquo;
Sub Classes are when we see that only some objects will have a value for an attribute but not the other one.</p>

<blockquote><p>To check whether inheritance (or sub- and superclasses) is actually applicable to
a given problem, you should ask the following questions. For example: to check whether
SubClassA is really a subclass of SuperClass in the above figure, ask</p>

<p>Is an object of SubClassA a type of SuperClass? (Always/sometimes/never)
Is an object of SuperClass a type of SubClassA? (Always/sometimes/never)</p>

<p>If the answer to the first question is “Always” and the answer to the second is
“Sometimes,” the problem is a good candidate for this type of model. For example,
we can check the validity of Figure 6-3 by asking
Is a data entry operator a type of employee? (Always)
Is an employee a type of data entry operator? (Sometimes)
These answers mean that making DataEntry a subclass of Employee is possible.
Asking the always/sometimes/never questions can help make sense of complicated</p></blockquote>

<p><strong>When Inheritance Is Not a Good Idea</strong>: confusing objects with subclasses, confusing an association with a subclass
<strong>When Is Inheritance Worth Considering?</strong>: the decision revolves around how important the accuracy of the data is to the objective of the project</p>

<p>When inheritance is a possibility:</p>

<ul>
<li>If different objects have mutually exclusive values for some attributes (e.g., data entry employees have speeds but technicians have grades), consider specialized subclasses.</li>
<li>When you think this is like that except for &hellip; , consider subclasses.</li>
<li>When two classes have a similar relationship with another class, consider a new generalized superclass (e.g., if both students and staff are assigned parking spaces, consider a generalized class for people).</li>
</ul>


<p>Prior to using inheritance, make sure of the following:</p>

<ul>
<li>You have not confused objects with subclasses (e.g., Rover is probably an object, Collie could be a class).</li>
<li>An association with a category class would be sufficient (e.g., Labrador and Collie could be objects of a Breed class, and each dog could be associated with a breed).</li>
<li>It is not just the value of an attribute that is different (e.g., don’t consider inheritance because the fee for Labrador and Collie is different).</li>
</ul>


<p>Other considerations:</p>

<ul>
<li>Classes at the top of the hierarchy should be abstract, which means they will never have any objects. This allows the problem to be more readily extended (unless you can think of a good, pragmatic reason to do otherwise).</li>
<li>Consider associations with roles when you come across the my object is a member of both these classes dilemma.</li>
<li>Don’t introduce the complexity of inheritance unless the specialized data in the subclasses is important to the main objectives of the project.</li>
</ul>


<h2>Chapter 7: From Data Model to Relational Schema</h2>

<p><img src="images/table71.jpg?raw=true" alt="" /></p>

<p>The steps to represent the main features of a data model with a relational database:</p>

<ol>
<li>For each class, create a table.</li>
<li>For each attribute, create a field and choose an appropriate data type. Consider whether some attributes (e.g., address) should be split into several fields.</li>
<li>Choose a field or combination of fields as the primary key. Ask careful questions to ensure that the key fields will always have unique values.</li>
<li>For each Many–Many relationship, insert a new intermediary class and two 1–Many relationships.</li>
<li>For each 1–Many relationship, take the primary key field(s) from the table at the 1 end and add this field(s) as a foreign key in the table at the Many end.</li>
<li>For a 1–1 relationship, put the foreign key in the table where it is most likely to have a value.</li>
<li>For compulsory relationships, add a constraint to the foreign key fields that they must not be null.</li>
<li>For inheritance (as an approximation), use a 1–1 is a relationship between the parent and each child class.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning Database Design by Clare Churchers (Ch. 4, 5)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/24/reading-beginning-database-design-ch-4-5/"/>
    <updated>2014-06-24T18:04:03+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/24/reading-beginning-database-design-ch-4-5</id>
    <content type="html"><![CDATA[<h2>Chapter 4: Learning from the Data Model</h2>

<p>These are just my notes on Chapters 4 and 5 of Beginning Database Design. The words are mix of mine and the author’s. They are not intended for reprint elsewhere.</p>

<blockquote><p>A data model has similar benefits and limitations to a mathematical equation. It is a
model of the relationships among the data items that are being stored about a problem,
but it is not a complete model of the real problem itself.</p></blockquote>

<p>Chapter 4 focuses on where definitions and scope of a data model can be expressed better. We learn a lot by just asking questions about the seemingly simpler relationships around avrious eobjects (especially around the number of objects at the end of a relationship). Four questions can be asked that help with this:</p>

<ol>
<li>Optionality: Should it be 0 or 1?: Optionality is the smallest number of objects that can assocaited with an object at the other end. Considering whether an optionality should be 0 or 1 might affect definitions of our classes: for example, “Would a student who was not enrolled in any courses still be considered a student for the purposes of our database?”</li>
<li>Cardinality of 1: Might it ocacsionally be 2?: We need to consider whether there might be exceptional cases where we might want to squeeze two numbers or categories into a box designed for one: for example, “What happens if the weather changes during a visit?” Redefining a class might help out for the exceptional cases: “If the weather changes, we will call it two visits.”</li>
<li>Cardinality of 1: What about historical data?: Always consider whether the 1 in a relationship really means “just one at a time”: for example, “A department has one manager. Do we want to know who the previous managers of the department were?” If so, the relationship should be Many–Many.</li>
<li>Many-Many: Are we missing anything?: We can ask &lsquo;Are there any data that we need to record that depends on a particular instance of each class in a Many-Many relationship?&rsquo;: Consider whether there is information we need to record about a particular pairing of objects from each class: for example, “What might we want to know about a particular student and a particular course?” If there is such information (the grade), introduce a new intermediate class.</li>
</ol>


<h2>Chapter 5: Developing a Data Model</h2>

<p><strong>Attribute, Class, or Relationship</strong>?</p>

<ul>
<li>Might I want to select teams based on grades; Will I either now or in the future want to store other data about a particular piece of information; Am I already storing such information => Classes</li>
<li>If there is different information to be stored => Consider storing than one relationship between classes</li>
<li>Objects of a class can be related to each other => Consider self-relationships</li>
<li>Check whether there is a closed loop to see if the same information is being stored more than once; Check to ensure you aren&rsquo;t inerring more than you should from a route; Check to see if a path is available => Different routes between classes</li>
<li>Consider introducing a new class where you need to know about combinations of objects from three or more classes; Any attributes in the new class must depend on a combination of objects from <em>each</em> of the participating classes; What information is related to two objects from pairs of contributing classes => Information dependent on objects or more than two classes</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning Database Design by Clare Churchers (Ch.2, 3)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/23/beginning-database-design-by-clare-churchers-ch-dot-2-3/"/>
    <updated>2014-06-23T13:52:56+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/23/beginning-database-design-by-clare-churchers-ch-dot-2-3</id>
    <content type="html"><![CDATA[<h2>Chapter 2: Guided Tour of the Development Process</h2>

<p>These are just my notes on Chapters 2 and 3 of Beginning Database Design. The words are mix of mine and the author’s. They are not intended for reprint elsewhere.</p>

<p>I&rsquo;m continuing through Beginning Database Design and I like how straightforward the book is. Its layout makes it easy to be engaged with the book and follow its clear examples well. I&rsquo;m having a little trouble figuring out what the best way to take notes on a technical book is through a blog, but I think it&rsquo;s worth pasting Chapter 2&rsquo;s summary here. This reflects the way it&rsquo;s worth thinking about how to go from a vague or non-precise problem statement to a solution in implementing a database for that problem, which was the bulk of what Chapter 2 was about:</p>

<blockquote><ol>
<li><strong>Express the problem in terms of what a user might want to achieve</strong>. For a database problem, this will typically be in terms of the data to be stored and the information that needs to be retrieved. Sketch some initial use cases and a data model.</li>
<li><strong>Undertake an iterative analysis process of reconsidering the data model and the use cases until satisfied you have a complete and precise understanding of the problem</strong>. For larger problems, this stage may include making some simplifying or other pragmatic choices.</li>
<li><strong>Choose the type of product to manage the data and create an appropriate design</strong>. For a relational database, this will involve designing tables, keys, and foreign keys. Different structures will be required if the project is to be implemented in some other type of product such as a programming language or a spreadsheet.</li>
<li><strong>Build the application</strong>. For a relational database, this will include setting up the tables and relationships and developing forms and reports to satisfy the use cases.
&mdash; Churchers, Clare. Beginning Database Design. Ch.2. Summary, Page 28.</li>
</ol>
</blockquote>

<h2>Chapter 3: Initial Requirements and Use Cases</h2>

<p>First we need to really understand the problem. This seems obvious, but often people can start setting up databases without understanding a problem in its entirety. Use cases and class diagrams are a good way to helping with this. But first, there are two key things associated with understanding the problem:</p>

<ol>
<li>What are all the tasks everyone who uses the system needs? Find out what the most pressing needs of the system are. We should also consider what role each of the users has.</li>
<li>What data do we need to store in order to allow (1)? Maintaining data includes four activities: <strong>C</strong>reate, <strong>R</strong>ead, <strong>U</strong>pdate, <strong>D</strong>elete.</li>
</ol>


<p><strong>Real and Abstract Views of a Probelm</strong>: We can (1) enter, edit or maintain data; or (2) extract information from a database based on some set of criteria. However, users and clients rarely understand the whole problem.</p>

<p>Data minding (someone is storing data that will be needed later on), Task automation (some job needs to get automated) are two main catagories that various database jobs fall under.</p>

<p><strong>Chapter Summary</strong></p>

<ul>
<li>What is the main objective of the system?</li>
<li>What are the different jobs that users do in an average day?</li>
<li>Brainstorm various data that could be associated with each job.</li>
<li>Agree on the scope of the project and decide on relevant data.</li>
<li>Sketch data input use cases &mdash; consider exceptions &mdash; check existing forms.</li>
<li>Sketch a first data model.</li>
<li>Brainstorm the possible outputs given the data being collected</li>
<li>Sketch information output use cases.</li>
</ul>


<p>Today&rsquo;s workout:</p>

<blockquote><ol>
<li>Back Squat 5x5</li>
<li>Bench Press 5x5</li>
<li>Weighted Dips 3x8</li>
</ol>
</blockquote>

<p>Follwed by a lovely meal at the best Indian food in the Cambridge area: Punjabi Dhaba.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A (mostly) Unplanned Day]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/22/a-mostly-unplanned-day/"/>
    <updated>2014-06-22T21:56:42+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/22/a-mostly-unplanned-day</id>
    <content type="html"><![CDATA[<p>I awoke rather early for Kratos getting picked up by Luis and Liz Paulet. They will be taking care of Kratos over the next few days while transporting him to Texas. Between work, school, travel this summer and Launch Academy starting in August, I didn&rsquo;t think I&rsquo;d have as much time as I should to hang out with him, so he&rsquo;ll be with my parents for a few months. I could just hear the excitement in their voices when they found out I wanted him to be in Texas for a little while. Kratos is a great dog and anyone who meets you will tell you he adds a little joy to everyone&rsquo;s life. For those of you who haven&rsquo;t met him, here he is:</p>

<p><img src="images/kratos.jpg?raw=true" alt="" /></p>

<p>I like that picture in particular because it looks like he&rsquo;s about to ask you something. Anyways, so after Luis and Liz picked him up around 6:30am, I slept for a couple more hours and then headed to the gym. This was my workout for today:</p>

<blockquote><ol>
<li>Front Squat 5x5</li>
<li>Weighted Rows 5x5</li>
<li>Weighted Pull-ups 3x8</li>
<li>Reverse Rows 3x8</li>
<li>Farmer&rsquo;s Walks once back and forth through the gym x5</li>
<li>and finally, 22 minutes of these for rounds: 10 kettlebell swings, 10 burpees, 10 kettlebell swings, 10 situps</li>
</ol>
</blockquote>

<p>Overall, I&rsquo;d like to get to a level where I can bench press 1.5x, back squat 2x and deadlift 2.5x my bodyweight. I should probably test my maxes soon to see where I am in relation to these. I&rsquo;d like to also be down to something like 12-15% bodyfat. Such a low level has eluded me my whole life and I feel like I&rsquo;m on the right track now as far as workouts and diet go, so I just want stay on track and see how things unfold over the coming months. There is a deluge of information on the web on workouts, nutrition, the best supplements, how much sleep you should and who knows what else that I decided to stick to the basics: Lift heavy weights and eat healthy meals when I&rsquo;m hungry. If my progress starts stalling, I&rsquo;ll take another look at things and see what I need to change, but right now I don&rsquo;t want to get distracted by everything out there.</p>

<p>After chowing down on some middle eastern food at Moody&rsquo;s Falafel Palace in Central Square, I headed to Rodney&rsquo;s &mdash; a bookstore &mdash; and spent about half an hour just perusing book shelves. I don&rsquo;t know why this is so soothing to me, but it is. I came across an interesting book on number theory, but decided against getting it because I don&rsquo;t think I&rsquo;d have the time to give it.</p>

<p>I started reading Beginning Database Design by Clare Churcher. It&rsquo;s a required text for Launch and I found it really easy to follow, unlike some other database books I&rsquo;ve taken protracted looks at over the years. I&rsquo;ve gone through the Introduction and Chapter 1 so far. These two sections mostly focus on the importance of database design. Churcher gives examples where poorly designed databases and tables resulted in problems in the future. One recurring problem with database design is the designer&rsquo;s inability or lack of want in asking what could be <em>other</em> possible uses of a database than for simply storage. To me it seemed like a lot of these poor databases just emulate what excel does and act as a repository for storage. The problem with this is that if a user wants to pull some data that doesn&rsquo;t fit the simplistic data model, major problems can arise. Churcher points to a few examples of poorly designed databases and how, at a bare minimum, they could have been redesigned. A botanical data model and student-grade data model were two that seemed interesting. In the botanical model, the database designer didn&rsquo;t think of <em>possible</em> queries. The design was simply a list of x plants with A, B and C usages. The problem was that a user wouldn&rsquo;t be able to see all the plants that have usage C or usage B with how the database was designed. A similar type of problem arose in the student-grade model where after a year of data (which worked fine), if students&#8217; grades were changed in prior years, problems arose. According to Churcher, database design is incredibly important to avoid <em>future</em> problems. This seems like an entirely reasonable view. I&rsquo;m hoping that the rest of the book keeps up with the simple, straigthforward writing that I saw in the first two sections.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interlude: Stefan Zweig]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/21/interlude-stefan-zweig/"/>
    <updated>2014-06-21T11:23:28+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/21/interlude-stefan-zweig</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;I think it better to conclude in good time and in erect bearing a life in which intellectual labour meant the purest joy and personal freedom the highest good on Earth&rdquo;
&mdash; <a href="http://en.wikipedia.org/wiki/Stefan_Zweig">Stefan Zweig</a></p></blockquote>

<p>Wes Anderson&rsquo;s movies capture a spirit about life that other movies simply don&rsquo;t. Other movies can call themselves <em>indie</em>, have a couple Pitchfork inspired hipster tunes on the soundtrack, flail around &mdash; and mostly fail &mdash; at being subversive, and just be generally confusingly post-modern. But Anderson&rsquo;s movies are character-driven through action rather than through the pseudo-intellectual chitchat you see in some <em>mumblecore</em> films out there (exceptions being movies like <em>Safety Not Guaranteed</em> or <em>Frances Ha</em>). Anderson&rsquo;s lead characters are wild and absurd, speak eloquently like Grand Budapest&rsquo;s <em>Gustave</em> or grittily and preposterously like The Royal Tenenabaums&#8217; <em>Royal Tenenbaum</em>. His characters are funny and flawed, yet they relish in their own existence and make you, as a viewer, laugh at their lunacy and feel for their mistakes.</p>

<p>The Grand Budapest Hotel&rsquo;s cinematography was incredible and the long-distance shots reminded me of <a href="http://37.media.tumblr.com/tumblr_lq35hpsDa41qddfu6o1_500.jpg">Mordecai</a>&rsquo;s scenes from <a href="http://en.wikipedia.org/wiki/The_Royal_Tenenbaums">The Royal Tenenbaums</a>, which is my favorite movie of his. What do I like about his movies? People call them <em>quirky</em>, but this isn&rsquo;t the best term for his movies. To call them <em>quirky</em> is like saying Dave Chapelle is <em>funny</em> or that <a href="http://www.sailusfood.com/2013/10/30/chiroti-best-indian-sweets-recipes/">chirotis</a> are a <em>tasty</em> Indian sweet. They simply don&rsquo;t capture the quality of the subject. They&rsquo;re weak descriptors. Dave Chapelle is <em>hilariously and absurdly funny</em> and chirotis are <em>deliciously and incredibly tasty</em>. I don&rsquo;t know what adjectives I can attach to <em>quirky</em> it seem a more appropriate term for Wes Anderson&rsquo;s movies, but there are probably some good ones.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R1: Pragmatic Thinking &amp; Learning (Ch. 9)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/20/r1-pragmatic-thinking-and-learning-ch-9/"/>
    <updated>2014-06-20T17:21:54+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/20/r1-pragmatic-thinking-and-learning-ch-9</id>
    <content type="html"><![CDATA[<h2>Chapter 9: Beyond Expertise</h2>

<p>These are just my notes on Chapter 9 of Pragmatic Thinking and Learning. The words are mix of mine and the author’s. They are not intended for reprint elsewhere.</p>

<p><strong>Effective Change</strong>: Practice makes permanent. Convince your brain all this stuff is important.</p>

<ul>
<li>Start with a plan: Block out some time and fight for it. Keep track of what you&rsquo;ve accomplished and review them. Use your &lsquo;exocortex.&rsquo;</li>
<li>Inaction is the enemy, not error: Don&rsquo;t mind doing something wrong; the problem lies in not doing anything at all. Don&rsquo;t fear mistakes.</li>
<li>New habits take time: It takes a minimum of 3 weeks of performing a new activity for it to become habitual. Give stuff time.</li>
<li>Belief is real: Your thoughts physically alter your brain. You must believe that change is possible. Thinking about failure results in it.</li>
<li>Take small, next steps: Setup small, achievable goals. Work towards them. Rinse and repeat.</li>
</ul>


<h2>What to Do Tomorrow Morning</h2>

<blockquote><p>Whatever you can do, or dream you can do, begin it. Boldness has genius, power, and magic in it. Begin it now. &mdash; Faust by Goethe</p></blockquote>

<p>Just start. Here&rsquo;s a suggested checklist:</p>

<ul>
<li>Start taking responsibility</li>
<li>Pick two things that will help you maintain context and avoid interruption, start immediately</li>
<li>Create a Pragmatic Investment Plan and setup SMART goals</li>
<li>Figure out where you are on the novice-expert spectrum and be honest about the progress you need to make. Do you need more recipes or context? More rules or intuition?</li>
<li>Practice. Work on a problem 5 different ways.</li>
<li>Plan on making mistakes. Mistakes are good.</li>
<li>Keep a notepad and doodle. Mind map. Take notes. Keep your thoughts loose and flowing.</li>
<li>Open up your mind to aesthetics and additional sensory inputs. Get in touch with how pleasing it is.</li>
<li>Start a personal wiki on things you find intersting.</li>
<li>Start blogging. Comment on books you&rsquo;ve read. Read more books. Use SQ3R and mind maps.</li>
<li>Make thoughtful walking a part of your day.</li>
<li>Start a book-reading group.</li>
<li>Get a second monitor and use a virtual desktop</li>
<li>Go through the &ldquo;next actions&rdquo; of each chapter and go through them</li>
</ul>


<h2>Beyond Expertise</h2>

<p>Always continue to act on curiosity. Always ask &ldquo;What if&rdquo; and be curious, full of wonder and amazement. Approach learning without any perceived notions, prior judgments or from fixed viewpoints. Always be aware. Be aware of yourself, the present moment, context in which you&rsquo;re operating. A big reason we fail is because we put stuff on autopilot. Don&rsquo;t zone out. Remember what da Vinci said &ldquo;People look without seeing, hear without listening, eat without awareness of taste, touch without feeling, and talk without thinking.&rdquo;</p>

<blockquote><p>Grab the wheel. You can&rsquo;t steer on autopilot.
&mdash; Andy Hunt</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R1: Pragmatic Thinking &amp; Learning (Ch. 8)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/19/r1-pragmatic-thinking-and-learning-ch-8/"/>
    <updated>2014-06-19T13:29:30+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/19/r1-pragmatic-thinking-and-learning-ch-8</id>
    <content type="html"><![CDATA[<h2>Chapter 8: Manage Focus</h2>

<p>These are just my notes on Chapter 8 of Pragmatic Thinking and Learning. The words are mix of mine and the author’s. They are not intended for reprint elsewhere.</p>

<p>An information-rich time has not led to knowledge and has also forced inattention. This chapter focuses on (1) Increasing focus and attention; (2) Managing knowledge; and (3) Optimizing your current context.</p>

<p><em>Attention</em> is an act of focusing in on an area of interest. Information != Knowledge. Context is related to things you are focused on.</p>

<h2>Increase Focus and Attention</h2>

<p>Attention is in short supply. In multiprocessor systems, there&rsquo;s a design problem where if all CPU cycles coordinate tasks with other CPUs, you actually don&rsquo;t get anything done. Not all attention-sinks are external. Even idle chatter in your head is problematic because it takes time away from the R-mode. We need to develp concentrated focus.</p>

<p><strong>Relaxed Concentrated Focus</strong>: Sit down and take a moment. Don&rsquo;t think about mistakes or worries about problems. Think about <em>now</em>. Doing this is difficult. Much of meditation, yoga and other practices try to do something similar. <em>Learn to pay attention</em>.</p>

<p><strong>How to Meditate</strong>: Aim for relaxed awareness. <em>Vipassana meditation</em> where you want to sink into relaxed awareness where you aren&rsquo;t judging or making responses. All you need to do here is pay attention to your breath.</p>

<ul>
<li>Find a quiet spot</li>
<li>Sit in a comfortable, alert posture. Have a straight back. Be aware of any tension you might have and let go.</li>
<li>Close your eyes and focus your awareness on your breath (where air enters your body and exits)</li>
<li>Be aware of the rhythm of your breath</li>
<li>Keep your mind focused on breath; don&rsquo;t use words or verbalize or start a conversation with yourself</li>
<li>Whenever your attention wanders off, bring it back to your breath</li>
</ul>


<p><strong>Next Actions</strong>: (1) Experiment with meditation on a regular basis; (2) Try to build up a set period of twenty minutes every day around the same time. Can you quiet your thoughts?</p>

<h2>Defocus to Focus</h2>

<blockquote><p>It&rsquo;s very clear that for a lot of people the creative process includes an enormous amount of sitting around and doing nothing
&mdash; Tom Lutz from <em>Doing Nothing: A History of Loafers, Loungers, Slackers, and Bums in America&#8221;</em></p></blockquote>

<p>Consciousness is an emergent mechanism rather than being controlled by some nexus. See Dan Dennett for more on his &ldquo;Multiple Draft&rdquo; theory of consciousness, where there are many drafts of many thoughts and plans going on at the same time. You need to make time to let them run their course.</p>

<p><strong>Next Actions</strong>: (1) What is your favorite recipe for mental marinade? Have you tried others?; (2) Have you criticized others for their time spent in the mental marinade? What will you do differently now?; (3) Have you been critized for marinating? How will you respond when this happens next?</p>

<h2>Manage Your Knowledge</h2>

<p><strong>Developing your Exocortex</strong>: You need to work with the material you&rsquo;ve been tabulating, documenting. The tools you use for mental support outside your brain are important. It&rsquo;s called <em>distributed cognition</em> and we can turbo-charge the brain with it. If you organize all your great ideas, you&rsquo;ll get more great ideas. Use a wiki to manage information and knowledge. Sounds like Evernote can help with a lot of this.</p>

<h2>Optimize Your Current Context</h2>

<p>Our brains aren&rsquo;t wired to switch from one context to another particularly well. You can&rsquo;t pay attention to too many different things at once. Multitasking can take a toll of 20-40% of your productivity. <em>Multitasking</em> here refers to performing multiple concurrent tasks at different levels of abstraction, like fixing bugs while responding to an IM or email or look at a news site. It takes 20 minutes to reload context. This is all related to today&rsquo;s <em>cognitive overload</em> &mdash; too much stuff our minds have to deal with (stress, distractions, multitasking, new information).</p>

<p><strong>Avoiding distractions</strong>: There are benefits to spartan user interfaces. They leave little room to get distracted.</p>

<p><strong>Single-Task interfaces</strong>: Look into apps or utilities that let you stick to one or few things at a time. There&rsquo;s something called Quicksilver on the mac.</p>

<p><strong>Organize and Process Tasks Efficiently</strong>: (1) Scan an input queue only once; (2) Process each pile of work in order; and (3) Don&rsquo;t keep lists in your head (like to-do lists, which are very expensive for the brain to keep and hold)</p>

<h2>Manage Interruptions Deliberately</h2>

<p><strong>Set Project Rules of Engagement</strong>: When is it OK to interrupt someone? When is it OK to be interrupted? Setup certain times of the day when you will not be interrupted. Setup other times for collaboration, daily stand-up meetings and other contingencies. <em>Establish rules of engagement to manage interruptions</em>.</p>

<p><strong>Rein in email</strong>: Fix your email announcement (no audio screaming that you have mail), bump up the polling interval (do you really need it checked every 10 seconds?) and organize scheduled times to deal with email. Exit your email client when not in use.</p>

<p><strong>Context-Friendly Breaks</strong>: What if you want a break? Consider raising the physical cost of entry and exit to remind you about the mental costs.</p>

<p><strong>Enable Maskable Interrupts</strong>: Maskable interrupts are the ones that can be ignored. Mask interrupts to maintain focus. Don&rsquo;t answer calls or IMs if you&rsquo;re busy.</p>

<p><strong>Save Your Stack</strong>: Prepare to be interrupted. Leave cues to get you back to your original work piece if you get interrupted. Leave little reminders of where you are.</p>

<h2>Keep a Big Enough Context</h2>

<p>Keep pertinent things you&rsquo;re working on around. Out of sight, out of mind. Use multiple monitors and avoid context switching.</p>

<p><strong>Maintain Task Focus</strong>: Keep whatever you&rsquo;re doing within the relevant task sphere. Communications: email, to-do, chat, calendar; Writing: textmate, dictionary, omnigraffle, acrobat, etc. Optimize your personal workflow to maximize context.</p>

<h2>How to Stay Sharp</h2>

<p>Self-awareness is required to stay sharp.</p>

<ul>
<li>Learn to quiet your chattering L-mode</li>
<li>Deliberately work with and add to thoughts in progress, even if they aren&rsquo;t &ldquo;done&rdquo; yet</li>
<li>Be aware of just how expensive context switching can be and avoid it</li>
</ul>


<h2>Next Actions</h2>

<ul>
<li>Think of routine things that you do that distract you. Can you streamline them to get them done without distractions?</li>
<li>Figure out when your most productive time is and limit distractions during those times</li>
<li>Keep track of &ldquo;down&rdquo; vs &ldquo;thinking&rdquo; time; and don&rsquo;t confuse the two</li>
<li>How easy can you pull yourself away from your work? Can you make it harder so you can stay focused more easily?</li>
<li>See what experts do to avoid distraction</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R1: Pragmatic Thinking &amp; Learning (Ch. 7)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/18/r1-pragmatic-thinking-and-learning-ch-7/"/>
    <updated>2014-06-18T17:53:05+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/18/r1-pragmatic-thinking-and-learning-ch-7</id>
    <content type="html"><![CDATA[<p>Chapter 7: Gain Experience</p>

<p>These are just my notes on Chapter 7 of Pragmatic Thinking and Learning. The words are mix of mine and the author’s. They are not intended for reprint elsewhere.</p>

<p>We learn best by doing. But you have to do more than &ldquo;do.&rdquo; This chapter looks at three concepts: (1) Build to learn, not learn to build; (2) Fail efficiently with better feedback; and (3) Groove your neural pathways for success.</p>

<h2>Play in Order to Learn</h2>

<p>Our brains are not designed to passively receive knowledge; we need to explore and build things. &ldquo;Play&rdquo; here means non-goal-directed exploration. We should poke at a problem, explore it to its ends. Messes and mistakes give you feedback in terms of what&rsquo;s needed. Mind maps get better over time as you do more of them. <em>Fun</em> is OK. <em>Fun</em> can lead to better presentations, better knowledge acquisition, etc. <a href="http://en.wikipedia.org/wiki/Seymour_Papert">Seymour Papert</a> has worked in the field of <em>fun</em> and learning (logo language). Working with new material in a playful manner makes it easier to learn. Create flash cards, make a baord game, use tinker-toys, lego blocks.</p>

<blockquote><p>Play more in order to learn more</p></blockquote>

<p><strong>Next Actions</strong>:</p>

<ul>
<li>On your next problem, put yourself in the picture.</li>
<li>Explore and get used to a problem before diving into the facts. Come back for more exploration after absorbing facts. Then go back to exploring.</li>
<li>Play, in every sense of the word.</li>
</ul>


<h2>Leverage Existing Language</h2>

<p><strong>Problem Solving with George Pólya</strong></p>

<p>To solve a problem, consider these questions:</p>

<ul>
<li>What are the unknown aspects?</li>
<li>What do you know? What data do you have?</li>
<li>What constraints and what rules apply?</li>
</ul>


<p>Then make a plan and execute it</p>

<ul>
<li>Try to think of a familiar problem having the same or similar unknowns</li>
<li>Draw a picture</li>
<li>Solve a related or simpler problem; drop some constraints in or use a subset of data</li>
<li>Were all the data and constraints used? If not, why not?</li>
<li>Try restating the problem.</li>
<li>Try working backward from the unknown toward the data</li>
</ul>


<blockquote><p>Learn from similarities; unlearn from differences</p></blockquote>

<h2>Embed Failing in Practice</h2>

<blockquote><p>A man&rsquo;s errors are his portals of discovery
&mdash; James Joyce</p></blockquote>

<p>Debugging is part of life. What is <em>debugging</em>? Debugging is solving problems which we&rsquo;ve made on our own. Identifying errors, oversights, etc. What is the value of learning from error? Papert: <em>Errors benefit us because they lead us to study what happened, to understand what went wrong, and, through understand, to fix it</em>. Playing is incredibly important and embeddeding a net for failure is too.</p>

<blockquote><p>Explore, invent, and apply in your environment &mdash; safely.</p></blockquote>

<p><strong>Create an Exploratory Environment</strong>: Freedom to experiment; ability to backtrack to a stable state; reproduce any work product of any time; and the ability to demonstrate progress.</p>

<blockquote><p>When you plant lettuce, if it does not grow well, you don&rsquo;t blame the lettuce. You look for reasons it is not doing well. It may need fertilizer or more water or less sun. You never blame the lettuce.
&mdash; Thich Nhat Hanh</p></blockquote>

<p><strong>Next Actions</strong></p>

<ul>
<li>Personal learning projects need to have a safety net. Put the infrastructure in place.</li>
</ul>


<h2>Learn About the Inner Game</h2>

<p>Understanding the <em>inner game</em> will help you eliminate interference from what&rsquo;s preventing you from learning. Old woman, tennis example (yelling &ldquo;hit&rdquo; or &ldquo;bounce&rdquo;). We learn by discovery, not instruction.</p>

<p><strong>Cultivate Situational Feedback</strong>: Awareness is important in becoming more than a novice. Situational feedback is the technique that lets you learn more efficiently by eliminating interference. See without judging, then act. Trying fails, awareness cures. Awareness trumps trying.</p>

<h2>Pressure Kills Cognition</h2>

<p>Deadlines panic the mind. R-mode is hurt by deadlines and feeling forced. <em>Permission to Fail</em> also leads to success. You don&rsquo;t need to make errors, but that it&rsquo;s OK if you did. Create &ldquo;failure permitted&rdquo; zones.</p>

<h2>Imagination Overrides Senses</h2>

<p>The brain isn&rsquo;t great at distinguising input sources. Many inputs can result in similar physical responses.</p>

<blockquote><pre><code>     {Consciousness}
Memory            Imagination/Prediction
         Sensory Input
</code></pre></blockquote>

<p>Our perception is based on prediction. Prediction is based on context and past experience. Imagine a friend who made a drastic change to their appearance, perhaps you didn&rsquo;t notice right away. You expect something to look a certain way and that is your perception of it. Or the stereotypical story of the husband who doesn&rsquo;t &ldquo;see&rdquo; his wife&rsquo;s new haircut.</p>

<p><strong>Successful Grooving</strong>: You can improve your performance by imagining that you&rsquo;ve already done so successfully. Surrounding yourself with better people also helps. &ldquo;Groove your mind for success.&rdquo; Artificially create the conditions that you&rsquo;d experience (or <em>feel</em> success) in order to get closer to it. Experience using scaffolding or temporary support. Swimmers do this by being attached to a rope going at high speed in order to know what the experience of swimming quickly feels like.</p>

<p><strong>Next Actions</strong>:</p>

<ul>
<li>The next time you&rsquo;re stuck in a difficult situation, remember &ldquo;Trying fails, awareness cures.&rdquo; Stop and become <em>fully aware</em> of the problem first.</li>
<li>Plan on failing. Know that it doesn&rsquo;t matter and that it&rsquo;s OK if you make a mistake. See whether that helps take the pressure off and improves your performance.</li>
<li>Be the expert. Don&rsquo;t just pretend, actually <em>play</em> the role of the expert. Notice how this changes your behavior.</li>
<li>Consider what kind of scaffolding you might need to share in the expert experience, and see if you can arrange for that.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R1: Pragmatic Thinking &amp; Learning (Ch. 6)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/17/r1-pragmatic-thinking-and-learning-ch-6/"/>
    <updated>2014-06-17T01:23:26+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/17/r1-pragmatic-thinking-and-learning-ch-6</id>
    <content type="html"><![CDATA[<h2>Chapter 6: Learn Deliberately</h2>

<p>These are just my notes on Chapter 6 of Pragmatic Thinking and Learning. The words are mix of mine and the author&rsquo;s. They are not intended for reprint elsewhere.</p>

<p>This chapter will go through what learning is, why it&rsquo;s important and go through some techniques to learn more deliberately. <em>Education</em> is related to the word <em>Educare</em> which means to &ldquo;draw out.&rdquo; This is interesting because typically when we think about education it&rsquo;s something that&rsquo;s <em>done</em> to a learner.</p>

<h2>Target SMART Objectives</h2>

<p>Specific goals are much better than vague ones. Ask a thousand questions around a goal to make it more specific. Have a series of objecttives that get you to your goal. A goal is a desired state and an objective is something that gets you closer to the goal.</p>

<ul>
<li>Specific: objective should be specific. convert &ldquo;I want to lose weight&rdquo; into &ldquo;I want to lose x pounds by y days&rdquo;</li>
<li>Measurable: Measure your objectives but stage them in increments. You have to measure your goal</li>
<li>Achievable: Make sure the goal is achievable (you won&rsquo;t be able to write a neural net optimizer in a week). Each objective should be attainable from where you are now</li>
<li>Relevant: Are you passionate about it? It needs to matter</li>
<li>Time-Boxed: Give yourself deadlines</li>
</ul>


<p>Objectives in a Larger Context. Make sure to understand your goals and objectives and how they relate to an entire system.</p>

<h2>Next Actions</h2>

<ul>
<li>Make a list of your three most important goals. Come up with a series of objectives for each (that follow SMART)</li>
</ul>


<h2>Create a Pragmatic Investment Plan</h2>

<p>Model your knowledge portfolio like you would a financial one. (1) Have a concrete plan; (2) Diversify; (3) Make an active, not passive, investment; and (4) Make a regular investment</p>

<p><strong>PIP: Have a Concrete Plan</strong>: Be as specific as you can and find different periods of time you have little plans for
<strong>PIP: Diversify</strong>: Have a wide range of knowledge bases
<strong>PIP: Active, not Passive Investment</strong>: Feedback lets you know how things are going. Keep looking at your knowledge investments.
<strong>PIP: Invest Regularly</strong>: Commit a minimal amount of learning every day. By scheduling them regularly, it will help. Plan what you want to do before you sit down and do it.</p>

<h2>Next Items</h2>

<ul>
<li>Write down concrete goals for now, the short-term, and long-term</li>
<li>Add two new areas that you haven&rsquo;t explored to help diversify your portfolio</li>
<li>Block out time each week to devote to your investment</li>
<li>Set up reminders to reevaluate your portfolio on a regular, periodic basis. What changed and what didn&rsquo;t work out? What will you do now?</li>
</ul>


<h2>User Your Primary Learning Mode</h2>

<p>Educators have divided up types of learners into a few boxes:
* Visual: need to see material and the instructor; they like graphs, pictures, body language, facial expressions
* Auditory: need to hear material through lectures, podcasts, seminars
* Kinesthetic: learn by moving and touching. think arts and crafts and sports.</p>

<h2>Multiple Intelligences</h2>

<p>Two major theories of cognitive context with respect to intelligence: Robert Sternberg&rsquo;s triarchic theory and Howard Gardner&rsquo;s theory of multiple intelligences. Sternberg sees a three-part mind, composed of a meta level component that manages thought processes overall (performance based components that do tasks, make associations; knowledge-acquisition components that handle assimilating new information). IQ tests don&rsquo;t measure the sum total of &ldquo;intelligence.&rdquo; Gardner also thought intelligence has many different facets: Kinesthetic, Linguistic, Logical/Mathematical, Visual, Musical, Interpersonal, Intrapersonal. Some people are good at some of these, but it doesn&rsquo;t mean that they can&rsquo;t be improved for those who don&rsquo;t have an affinity towards them. Discover how you learn best. There are some online tests (active vs reflective learning, etc.).</p>

<h2>Next Actions</h2>

<ul>
<li>Think about the intelligences you&rsquo;re strongest at. Which ones do you use most? Are your strongest intelligences a good match for your job? Or not?</li>
<li>And which do you use for hobbies? Do you have a strong intelligence that isn&rsquo;t being used well? Can you find a way to apply it?</li>
<li>If there&rsquo;s a mismatch, what can you do to make up for it? If you&rsquo;re a visual learner, can you start creating visual aids for work? If kinesthetic, would props help?</li>
</ul>


<h2>Work Together, Study Together</h2>

<p><strong>Form Study groups to learn and teach</strong></p>

<ul>
<li>The adult learner is motivated to learn if learning will satisfy their own interests &amp; needs</li>
<li>Units studied should be real-life situations, not just isolated subjects</li>
<li>Analysis of the learner&rsquo;s experience is the core method employed</li>
<li>Adults need self-direction; the instructor should help them engage in mutual inquiry</li>
<li>The instructor must allow for differences in style, time, place, and pace</li>
</ul>


<h2>Use Enhanced Learning Techniques</h2>

<p>(1) Reading deliberately and summarizing what you&rsquo;ve read
(2) Using mind maps to understand patterns and relationships
(3) Learn by teaching</p>

<h2>(1) Read Deliberately with SQ3R</h2>

<ul>
<li>Survey</li>
<li>Question</li>
<li>Read</li>
<li>Recite</li>
<li>Review</li>
</ul>


<p>I&rsquo;ve already written about this in a prior post so I&rsquo;m going to skip it here and look at the (2)</p>

<h2>(2) Visualize Insights with Mind Maps</h2>

<p>This technique was invented by Tony Buzan in <em>The Mind Map Book: How to Use Radiant Thinking to Maximize Your Brain&rsquo;s Untapped Potential</em>. Here are some vague rules for mind maps:</p>

<ol>
<li>Start with a large piece of unlined paper</li>
<li>Write the subject title in the center of the page with a circle around it</li>
<li>For the major subject subheadings, draw lines out from this circle and add a title to each</li>
<li>Recurse for additional hierarchical nodes</li>
<li>For other individual facts or ideas, draw out from the appropriate heading and label them as well</li>
</ol>


<p>Each node is connected and the figure should be hierarchical. You should be playful with colors and symbols and anything else that has meaning for you. Don&rsquo;t go clockwise (that&rsquo;s just an outline in graphical format). Emphasize spatial cueing and relationships. While you are doing it, you will be forced to figure out relationships. Once you&rsquo;ve drawn one mind map, then do it again on another piece of paper. Redrawing and retrieving exposes additional insights. Use colors.</p>

<p><strong>Mind Map Enhancements</strong>. This kind of mental noodling helps the R-mode. Call it &ldquo;playing.&rdquo; Hand-drawing is important. Why not try a mind-map for writing? Take notes with R-mode and L-mode.</p>

<p><strong>Quick Exercise</strong></p>

<ol>
<li>Take a four or five item bullet list that&rsquo;s important to you</li>
<li>Draw a mind map for items on the list</li>
<li>Wait a day</li>
<li>Now spend 15-20 minutes embellishing the drawing. Add thick lines, colors, doodles, etc.</li>
<li>Review the mind map a week later</li>
</ol>


<p><strong>Using Mind Maps with SQ3R</strong>. Take notes as you go in form of a mind map. You can fill the map in as you get details. When you&rsquo;re in the review phase of SQ3R, you can revise your mindmap accordingly.</p>

<p><strong>Exploratory Mind Maps</strong>. Mind maps can help when you&rsquo;re trying to explore a new idea or system. It can help gather far-flung thoughts together.</p>

<p><strong>Collaborative Mind Maps</strong>. Mind maps can be done in groups too. People get sticky notes and a marker, you brainstorm, write stuff down and place the sticky notes on a whiteboard.</p>

<h2>Next Actions</h2>

<ul>
<li>Make a mind map for the next book you read</li>
<li>Make a mind map for your career, lifestyle plans or even vacation</li>
<li>Experiment with the effect of color</li>
<li>Experiment with graphical annotations</li>
<li>Keep iterating</li>
</ul>


<p><strong>Harness the Real Power of Documenting</strong>. Documenting things is more important than documentation. Make a podcast or screencast. Document whatever you&rsquo;re doing as it could help provide insight later.</p>

<h2>Learn by Teaching</h2>

<p>Explaining what you&rsquo;ve learned helps tremendously with understanding. Consider <em>rubber ducking</em>, where you explain the issue to a duck. Flashes of insight can come into play when you talk to someone about a problem. Also, trying to explain your problem in words someone else can understand (say a child or aunt) can be helpful.</p>

<h2>Next Actions</h2>

<ul>
<li>Take a new topic, and try to teach it to a co-worker or relative. What did you learn from teaching and during the preparation for teaching?</li>
<li>If you haven&rsquo;t been going to a local user group, start going.</li>
<li>Listen carefully to the speakers. Make a mind map of the topic area. What would you add to it? What would you do differently? Write up a critique for the group based on your mind map.</li>
<li>Contact the organizers and offer to speak on your topic for an upcoming meeting</li>
<li>If not, then write an article or blog on your topic</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R1: Pragmatic Thinking &amp; Learning (Ch. 5)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/16/r1-pragmatic-thinking-and-learning-ch-5/"/>
    <updated>2014-06-16T16:28:25+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/16/r1-pragmatic-thinking-and-learning-ch-5</id>
    <content type="html"><![CDATA[<p>Chapter 5: Debug Your Mind</p>

<p>These are just my notes on Chapter 5 of Pragmatic Thinking and Learning. The words are a mix of mine and the author’s.</p>

<p>A look at four broad categories of bugs in our thinking: (1) Cognitive biases; (2) Generational affinity; (3) How your personality influences your thoughts; (4) Hardware bugs.</p>

<h2>(1) Meet Your Cognitive Biases</h2>

<ul>
<li>Anchoring: seeing a number will affect how decide on a quantity (seeing $100 over and over again makes $85 look good)</li>
<li>Fundamental attribution error: ascribing another&rsquo;s behavior to their personality (as opposed to behavior being context based &mdash; think war or some other extreme condition)</li>
<li>Self-serving bias: Success = me; failure = not-me; Remember that you are part of a system whether it did well or not</li>
<li>Need for closure: we are uncomfortable with doubt and uncertainty; but uncertainty can be helpful because it leaves choices open. Premature closing can result in forcing you to act a certain way, or forcing certain bugs, etc. We should be comfortable with uncertainty.</li>
<li>Confirmation bias: Looking for facts or choice theories to fit your worldview</li>
<li>Exposure effect: We tend to prefer familiar things (tools, techniques, methods that don&rsquo;t work well anymore &mdash; we might still gravitate towards them because they are comfortable)</li>
<li>Hawthorne effect: People change their behavior when they know they are being watched. At first this can be positive but then drop off over time</li>
<li>False memory: Confusing imagined events with actual memories. Memory is an active process and is constantly being written and we are susceptible to suggestion and other stimuli.</li>
<li>Symbolic reduction fallacy: a need to create a quick symbol that serves as an analogy for a really complex system; and thereby ignores little nuances and even the truth of the matter</li>
<li>Nominal fallacy: thinking that labeling a thing means you can understand it. The problem here is that the label doesn&rsquo;t necessarily enhance any understanding of a system. (&ldquo;She&rsquo;s a Republican&rdquo; doesn&rsquo;t really say anything)</li>
</ul>


<p>Our biases make it very difficult (if not impossible) to predict the future. They also make it hard to navigate the present (think Correlation vs. Causation). <em>Rarely doesn&rsquo;t mean Never</em>.</p>

<blockquote><p>The palest ink is better than the best memory
&mdash; Chinese proverb</p></blockquote>

<p>It&rsquo;s worth augmenting your memory with notes or something to keep them as &ldquo;real&rdquo; as possible.</p>

<h2>Next Actions</h2>

<ul>
<li>List the cognitive biases you recognize yourself. Which ones are you most susceptible to?</li>
<li>Consider some astronomically unlikely events you&rsquo;ve seen. How unlikely were they?</li>
<li>Start a log of notes from design meetings, coding questions, etc. Put a mark next to an entry any time you go back and use it.</li>
</ul>


<h2>(2) Recognize Your Generational Affinity</h2>

<blockquote><p>Anything that is in the world when you&rsquo;re born is normal and ordinary and is just a natural part of
the way the world works. Anything that&rsquo;s invented between when you&rsquo;re fifteen and thirty-five is
new and exciting and revolutionary and you can probably get a career in it. Anything invented
after you&rsquo;re thirty-five is against the natural order of things.
&mdash; Douglas Adams, The Salmon of Doubt</p></blockquote>

<p>Consider context. You are a product of your times. Parents and your cohort influence you the most. Attitudes may differ around events that have been shared experiences: (1) Risk taker vs risk adverse; (2) Individualism vs teamwork; (3) Stability vs freedom; (4) Family vs work. Different generations will view these things differently. Understanding these biases can help you understand where you sit. Four generational archetypes: (1) Prophet; (2) Nomad; (3) Hero; and (4) Artist. Try to be diverse and aware of teh context around generational biases.</p>

<h2>Next Actions</h2>

<ul>
<li>Which generation were you born into? Do these characteristics resonate with you? Does a different generation resonate better?</li>
<li>Determine the generations to which your co-workers belong. Do they coincide or conflict with your values?</li>
<li>Think about the history of software development methodologies. Is there a trend over time with each generation&rsquo;s values?</li>
</ul>


<h2>(3) Codifying Your Personality Tendencies</h2>

<p>People are different (a bleeding hear type isn&rsquo;t going to ignore human suffering to follow rules; and a rigid type isn&rsquo;t going to be swayed by drama). Myers-Briggs test. <em>Allow for different bugs in different people</em>.</p>

<h2>Next Actions</h2>

<ul>
<li>Take a personality test. How does it compare with friends and family and co-workers? Do results resonate with you?</li>
<li>What if you were the complete opposite of what the test told you. How would the world look to you? How would you interact with someone like that?</li>
<li>Hang out with people with different personalities than yourself.</li>
</ul>


<h2>(4) Exposing Hardware Bugs</h2>

<p>The neocortex was added pretty recently. The older areas of the brain are involved in <em>fight or flight</em> types of responses. Underneath all our civilization, we are still a mashup of old and new areas of our brains.</p>

<p><strong>Lizard Logic</strong></p>

<ul>
<li>Fight, flight or fright</li>
<li>Get it now: everything is immediate or automatic; don&rsquo;t think or plan</li>
<li>Be dominant: You are the alpha dog</li>
<li>Defend the territory: never share information, tips, etc. Protect your interests.</li>
<li>If it hurts, hiss: don&rsquo;t fix a problem, just blame someone else</li>
<li>Like me = good; not like me = bad: Anything is either good or evil</li>
</ul>


<p>People we hang out with influence us. Happy outgoing people tend to lift our moods; depressed, pessimistic people lower them. <em>Act like you&rsquo;re evolved, just breath and don&rsquo;t hiss</em>.</p>

<h2>Next Actions</h2>

<ul>
<li>Notice how long it takes you to get over your initial reaction to a perceived threat; How does your reaction change once you &ldquo;think about it&rdquo;?</li>
<li>Act on impulse but not immediately; plan for it, schedule it. Does the act still make sense later on?</li>
<li>Write a new movie. This time let it have a happy ending.</li>
<li>Smile.</li>
</ul>


<blockquote><p>The fact that we live at the bottom of a deep gravity well, on the surface of a gas-covered planet
going around a nuclear fireball 90 million miles away and think this to be normal is obviously
some indication of how skewed our perspective tends to be.
&mdash; Douglas Adams, The Salmon of Doubt</p></blockquote>

<p><em>Trust intuition but verify</em>. To get a bigger perspective, ask yourself the following questions: How do you know? Says who? How specifically? How does what I&rsquo;m doing cause you to &hellip;? Compared to what or whom? Does it always happen? Are there exceptions? What would happen if you did or didn&rsquo;t do X? What stops you from?</p>

<h2>Next Actions</h2>

<ul>
<li>When in conflict, consider personality types, generational values, your own biases, others&#8217; biases, context and environment. Can finding a solution be easier with this addtional awareness?</li>
<li>Examine your own positions carefully. How do you know what you know? What makes you think so?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R1: Pragmatic Thinking &amp; Learning (Ch. 4)]]></title>
    <link href="http://vikram7.github.io/blog/2014/06/15/r1-pragmatic-thinking-and-learning-ch-4/"/>
    <updated>2014-06-15T23:56:18+00:00</updated>
    <id>http://vikram7.github.io/blog/2014/06/15/r1-pragmatic-thinking-and-learning-ch-4</id>
    <content type="html"><![CDATA[<h2>Chapter 4: Enter Your Right Mind</h2>

<p>These are just my notes on Chapter 4 of Pragmatic Thinking and Learning. The words are a mix of mine and the author&rsquo;s.</p>

<p>Techniques on how to bring more mental power and processing your way. Don&rsquo;t dismiss unusual or uncomfortable thoughts. Instead these could just be the most valuable ones.</p>

<h2>Turn Up The Sensory Input</h2>

<p>Activate more neural pathways than usual. Expand sensory involvement using different senses. Some studies showed a significant improvement (500%) for students using multisensory techniques. One example is fiddling with a paper clip or some kind of tactile puzzle while trying to understanding a problem. <strong>Add sensory experience to engage more of your brain</strong>
Building blocks like legos are good types of things to do. Involve one extra sense in what you&rsquo;re doing. Then include other senses. The brain loves stimuli like this. Feed the brain, try to add extrasensory involvement. Try the following when it comes to a problem:</p>

<p>1) Write down the problem like you usually would
2) Draw a picture of the problem. Which visual metaphor is the best?
3) Talk out the problem and describe it verbally
4) Talk to your teammates about it
5) Are there physical metaphors involved? Act them out.</p>

<h2>Draw on the Right Side</h2>

<p>Drawing is an R-mode activity. To access the R-mode, give the brain a job that the L-mode doesn&rsquo;t care about or isn&rsquo;t involved in. Limit cognitive interference. Upside down picture copying exercise. Some questions from this. How did drawing this upside down feel? Was it feeling &ldquo;different&rdquo;? Were you immersed in the drawing? Was the drawing better than you thought?</p>

<h2>Engage an R-mode to L-mode Flow</h2>

<p>Lozanov language learning experiment. Taught people a foreign language by bombarding them with examples. No lecture, no footnotes, no explanations, just exposure. <strong>Write Drunk, Revise Sober.</strong> Your creativity should have free reign. <strong>Pair Programming</strong> is an interesting way to get L-mode to work with R-mode. One person runs the IDE (driver) and the other (navigator) gives suggestions and advice. It works well because L-mode and R-mode work in conjunction. Working with another person gets you to abstract thinking. Learn to be comfortable with anxiety. Try to understand the meaning initially and understand the general issue around a problem.</p>

<h2>Meeting in Metaphor</h2>

<p>L-mode and R-mode meet in metaphor. Using metaphors is a great technique towards enabling creativity. George Lakoff says we cannot think without metaphor. People generally are not very good at the abstract and things found in every day life are easier to understand. But there are degrees of good metaphors; some metaphors are just examples of L-mode but others can be better. <strong>Juxtaposing Frames of Reference.</strong> Switching from one metaphor in one frame of reference to another that&rsquo;s completely different forms the basis of a strong metaphor. The juncture of such is called <em>bisociation.</em> The bigger difference in frames of reference, the better the metaphor.</p>

<p>The technique of <strong>random juxtaposition</strong>. You take one word from one subject area and combine it with a completely different word. The goal is to create a <em>bisociation</em> from these words. The more different the subject matter, the harder it is to create meatphors.</p>

<p>System Metaphor: any software system can be explained by a metaphor. Payroll system &lt;=> Post office with mailboxes, schedules, etc. Metaphors eventually are insufficient but a very good metaphor can help design a system and answer
questions related to development. Be flexible with metaphors. Something that seems right can be wrong, so one should be flexible with them. HUmor is a good way to think about metaphors. &ldquo;Instead of drawing an analogy, you might also extend an existing idea past what&rsquo;s reasonable.&rdquo;</p>

<blockquote><p>Cultivate humor to build stronger metphors.</p></blockquote>

<h2>Next Actions</h2>

<ul>
<li>Make more metaphors in anything (software, art, etc.)</li>
<li>Start metaphors with a thesaurus</li>
<li>Try WordNet (<a href="http://wordnet.princeton.edu">http://wordnet.princeton.edu</a>)</li>
</ul>


<h2>Harvest R-mode Cues</h2>

<p>Techniques to coerce and jiggle R-mode into view. Anecdote of Elias Howe and the sewing machine.</p>

<ul>
<li>Harvesting with Image Streaming: First pose a problem to yourself and ask a question. Then close your eyes for about ten minutes and consider each image that crosses your mind. Put your feet up, then do the following.
1) Look at the image and consider all its details
2) Vocalize the description
3) Pretend or imaging this image using each (or as many as possible) of the five senses
4) Describe it in present tense</li>
</ul>


<p>You will engage more pathways and strengthen connections if you do this. By interpreting the image, your mind will coalesce related info. You might discover insights as a result.</p>

<ul>
<li>Harvesting with Free-Form Journaling</li>
</ul>


<p>Write. Letter writing is an excellent habit. Once you begin writing, keep going. Don&rsquo;t worry about technical details. Worry about editing later. It&rsquo;s worth considering something called <strong>The Morning Pages Technique:</strong></p>

<ul>
<li>Write <em>first thing</em> in the monring</li>
<li>Write 3 pages, at least, by hand. No typing, no computer.</li>
<li>Don&rsquo;t censor your writing.</li>
<li>Don&rsquo;t skip a day.</li>
</ul>


<p>Labyrinths &amp; Mazes. Take long walks. Henri Poincaré, when he had a difficult problem in front of him, would put everything he knew about it onto paper. He&rsquo;d then see easy mini problems and tackle them first. He would then choose the easiest of the bigger problems and go for a walk thinking only about that subproblem. When an insight came to mind, he&rsquo;d break the walk and go back home and write the answer down. He&rsquo;d complete this entire process again and again until everything was solved.</p>

<blockquote><p>R-mode can be invited, not commanded.</p></blockquote>

<p>Walking helps because it helps you think in a freeform fashion. Deliberate thinking is L-mode, but walking around without forcing it can invite R-mode. Defocus. &ldquo;Bear in mind what one needs to know&rdquo; without forcing the thinking.</p>

<h2>Harvesting Patterns</h2>

<p>Writing code in a good format helps with pattern matching. Creativity in problem solving go hand in hand. Try to see problems in different ways. Sound engineers, for example, run all the bad sounds in order to eventually make them good. They <em>turn the problem around</em>. If a bug comes up, try to come up with 3-4 ways to force the bug to happen (deliberately). Try the same thing with UI design, etc. This idea comes up in Roger von Oech&rsquo;s book <em>A Whack on the Side of the Head</em>. He suggests not dismissing <em>play</em> as being foolish or frivolous. Most problems have many solutions.</p>

<blockquote><p>Necessity is the mother of invention. Play is the father of invention.
&mdash; Roger von Oech</p></blockquote>

<p>Imagine yourself as being part of the issue at hand and how you would react to certain stimuli (or lack of stimuli). How does doing this open up a problem to different viewpoints? Consider composers&#8217; Brian Eno and Peter Schmit&rsquo;s <a href="http://www.rtqe.net/ObliqueStrategies/">100 oblique strategies</a>. Here are four examples:</p>

<ul>
<li>What else is like this?</li>
<li>Change nothing and continue consistently</li>
<li>Shut the door and listen from the outside</li>
<li>Your mistake was a hidden intention</li>
</ul>


<p>Change your routine. Mess around with words. Repurpose key words to create a greater sense of wonder and surprise. Use nouns as verbs. These are called <em>functional shifts</em> and help increase brain activity.</p>

<p>Learn to combine R-mode and L-mode thinking.</p>

<h2>Next Actions</h2>

<p><strong>New Habits</strong></p>

<ul>
<li>Do morning pages for 2 weeks</li>
<li>Hone a quick wit and look for connections/analogies/metaphors between unrelated things</li>
<li>Involve all your senses (or more of them) when facing a tricky problem</li>
<li>Read something different than what you usually read</li>
<li>Try a different genre of entertainment (movie, vacation, music, coffee)</li>
<li>Order something completely different at a favorite restaurant</li>
<li>Turn problems around. What happens if you reverse a problem and look at it the way in reverse</li>
</ul>


<p><strong>Try This</strong></p>

<ul>
<li>Deliberately change your morning routine or another consistent habit</li>
<li>Hold a design with Lego blocks</li>
<li>Take up a hobby that requires more R-mode processing. Do it daily</li>
<li>Have a buddy to keep you motivated</li>
<li>Think of a metaphor and see how it would describe a project you&rsquo;re doing. Come up with some related jokes.</li>
<li>What &ldquo;quirky habits&rdquo; that experts you know do and do they make sense?</li>
<li>What words can you add to your workplace lexicon?</li>
</ul>

]]></content>
  </entry>
  
</feed>
